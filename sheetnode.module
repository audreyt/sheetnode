<?php

/**
 * @file
 * This is the main module for the sheetnode node type, which displays a
 * spreadsheet based on the SocialCalc spreadsheet widget.  
 */

define('SHEETNODE_VIEW_READONLY', 0);
define('SHEETNODE_VIEW_FIDDLE', 1);
define('SHEETNODE_VIEW_HTML', 2);

/**
 * Implements hook_node_info().
 */
function sheetnode_node_info() {
  return array(
    'sheetnode' => array(
      'name' => t('Sheetnode Node Type'),
      'module' => 'sheetnode',
      'base' => 'sheetnode',
      'description' => t('A spreadsheet node.'),
    )
  );
}

/**
 * Implements hook_rdf_model_alter
 * 
 * This should probably be deprecated in favor of the sheetnode_rdf module. 
 */
//function sheetnode_rdf_mapping_alter() {
/*
function sheetnode_rdf_model_alter($res, &$context) {
  
  $i = 0;
  
  //  Only change if this is a sheetnode type
  if ($context['type'] == 'node')    {

    //  Get the wrapper from the node ID
    $wrapper = entity_metadata_wrapper($context['type'], $context['data']);

    //  Get entity data from the $wrapper
    $entity = $wrapper->value();

    if (isset($entity->type))   {
      $bundle_type = $entity->type;
      if ($bundle_type == 'sheetnode')  {
        
        
        //  This is a sheetnode type, so we can add RDF data
        //$res->index['http://play4.dev/node/39']['http://purl.org/dc/terms/title']['0']['value'] = 'Cell Value';
        //$res->index['http://play4.dev/node/39']['http://purl.org/dc/terms/title']['0']['type'] = 'literal';
        //$res->index['http://play4.dev/node/39']['http://purl.org/dc/terms/title']['0']['datatype'] = '';
      }
    }
    
/*
    $sheetnode_rdf_mappings = array(
      array(
          'type'    => 'node',
          'bundle'  => 'sheetnode',
          'mapping' => array(
              'rdftype' => array('foaf:page'),
              'name'    => array(
                  'predicates'  => array('foaf:page'),
              ),
          ),
       ),  
    );
*/
/*    
 }
    
//  rdf_mapping_save($sheetnode_rdf_mappings);
  
  //return $sheetnode_rdf_mappings;
}
*/


/**
 * Implements hook_form.
 */
function sheetnode_form($node, &$form_state) {

  $node->language = 'und';

  $form = array();
  
  $form['title'] = array(
    '#type'           =>  'textfield',
    '#title'          =>  t('Title'),
    '#default_value'  =>  $node->title,
  );

  $nid = 0;
  if (isset($node->nid)) {
    $nid = $node->nid;
  }

  //  SocialCalc sheet
  if (isset($_POST['sheetsave'])) {
    $value = $_POST['sheetsave'];
  } 
  elseif (!empty($node->nid)) {
    $value = _sheetnode_load($node->nid, $node->vid);
  } 
  elseif (isset($form_state['input']['sheetsave'])) {
    //  For importing Excel file
    $value = $form_state['input']['sheetsave'];
  } 
  else {
    $value = '';
  }

  //  Insert the spreadsheet using #markup in a form element
  $output = _sheetnode_inject($value, TRUE, 'edit-sheetsave', array(
              'entity-name' => 'node',
              'oid' => $nid,
          )
  );
  $form['sheet']['sheetview'] = array('#markup' => $output);

  //  Hide the data from view in the form
  $form['sheetnode_data']['#type'] = 'hidden';
  
  //  Set the labels for later identification
  $form['sheet']['sheetsave'] = array('#type' => 'hidden');
  $form['sheet']['sheetsave']['#attributes'] = array('id' => 'edit-sheetsave');
  
  return $form;
}

/**
 * Implementation of hook_insert().
 */
function sheetnode_insert($node) {
  $value = '';
  if (isset($_POST['sheetsave'])) {
    $value = $_POST['sheetsave'];
  }

  if (!empty($node->sheetsave)) {
    _sheetnode_save($node->nid, $node->vid, $node->sheetsave);
  }
}

/**
 * Implements hook_update
 */
function sheetnode_update($node) {

  if (isset($_POST['sheetsave'])) {
    $value = $_POST['sheetsave'];
  }

  if (!empty($node->sheetsave)) {
    _sheetnode_save($node->nid, $node->vid, $node->sheetsave);
  } 
  elseif (!empty($node->revision)) {
    //  reverting a revision
  }
}

/**
 * Inject the SocialCalc spreadsheet into the page
 */
function _sheetnode_inject($value, $editing, $edit_id = 'edit-sheetsave', $context = NULL) {

  global $base_url;

  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalcconstants.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalc-3.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalctableeditor.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/formatnumber2.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/formula1.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalcpopup.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalcspreadsheetcontrol.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalcviewer.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode') . '/sheetnode.js');
  drupal_add_css(drupal_get_path('module', 'sheetnode') . '/socialcalc/socialcalc.css');
  drupal_add_css(drupal_get_path('module', 'sheetnode') . '/sheetnode.css');
  drupal_add_js(array('sheetnode' => array(
          'value' => $value,
          'image_prefix' => $base_url . '/' . drupal_get_path('module', 'sheetnode') . '/socialcalc/images/sc-',
          'view_id' => 'sheetview',
          'edit_id' => $edit_id,
          'editing' => empty($editing) ? FALSE : TRUE,
          'fiddling' => variable_get('sheetnode_fiddle', SHEETNODE_VIEW_FIDDLE),
          'perm_edit_sheet_settings' => user_access('edit sheet settings') ? TRUE : FALSE,
          'context' => $context,
          )), 'setting');

  drupal_add_js('Drupal.behaviors.sheetnode = { attach: function(context) { Drupal.sheetnode.start(context); } }', 'inline');

  $output = '<div class="sheetview" id="sheetview"></div>';
  return $output;
}

/**
 * Implements hook_view.
 */
function sheetnode_view($node, $view_mode) {
  if ($view_mode != 'teaser')   {
    //  Show the spreadsheet
    $value = _sheetnode_load($node->nid, $node->vid);
    $output = _sheetnode_inject($value, FALSE, NULL, NULL);
    $node->content['sheetnode'] = array('#markup' => $output, '#weight' => -1);
  }

  return $node;
}


/**
 * Sanitizes the javascript
 */
function _sheetnode_sanitize_js($value) {
  $chars = array(
      chr(0xE2) . chr(0x80) . chr(0xA8), // Got this from Google Docs
  );
  return str_replace($chars, '', $value);
}

/**
 * Load the sheetnode data from the database.
 */
function _sheetnode_load($nid, $vid) {
  $query = db_select('sheetnode');
  $query->fields('sheetnode', array('value'));

  $query->condition('nid', $nid);
  $query->condition('vid', $vid);
  $result = $query->execute();

  $value = '';
  while ($record = $result->fetchAssoc()) {
    $content = $record['value'];
    $value = unserialize($content);
  }

  return $value;
}

/**
 * Save the sheetnode data to the database.
 */
function _sheetnode_save($nid, $vid, $value) {
  //  Delete the old spreadsheet record
  $query = db_delete('sheetnode');
  $query->condition('nid', $nid);
  $query->condition('vid', $vid);
  $query->execute();

  //  Insert a new record for the new spreadsheet data
  db_insert('sheetnode')
          ->fields(array(
              'nid'       => $nid,
              'vid'       => $vid,
              'value'     => serialize($value),
          ))
          ->execute();
}
