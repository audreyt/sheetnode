<?php

/**
 * Implements hook_node_info().
 */
function sheetnode_node_info() {
  return array(
    'sheetnode' => array(
      'name' => t('Sheetnode'),
      'module' => 'sheetnode',
      'description' => t('A spreadsheet node.'),
      'base' => 'sheetnode',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function sheetnode_permission() {
  return array(
    'create sheetnode' => array(
      'title' => t('Create new sheetnode'),
      'description' => t('Create new sheetnodes.'),
    ),
    'edit own sheetnode' => array(
      'title' => t('Edit own sheetnode'),
      'description' => t('Edit own sheetnodes.'),
    ),
    'edit any sheetnode' => array(
      'title' => t('Edit any sheetnode'),
      'description' => t('Edit any sheetnodes.'),
    ),
    'delete own sheetnode' => array(
      'title' => t('Delete own sheetnode'),
      'description' => t('Delete own sheetnodes.'),
    ),
    'delete any sheetnode' => array(
      'title' => t('Delete any sheetnode'),
      'description' => t('Delete any sheetnodes.'),
    ),
    'create sheetnode template' => array(
      'title' => t('Create sheetnode template'),
      'description' => t('Create sheetnode templates.'),
    ),
    'edit sheetnode settings' => array(
      'title' => t('Edit sheetnode settings'),
      'description' => t('Modify sheetnode settings and formatting.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function sheetnode_node_access($op, $node, $account) {
  if (is_string($node)) {
    if ($node != 'sheetnode') return NODE_ACCESS_IGNORE;
  }

  if ($op == 'create') {
    return user_access('create sheetnode', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  if ($op == 'update') {
    return user_access('edit any sheetnode', $account) || (user_access('edit own sheetnode', $account) && ($account->uid == $node->uid)) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  if ($op == 'delete') {
    return user_access('delete any sheetnode', $account) || (user_access('delete own sheetnode', $account) && ($account->uid == $node->uid)) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_load().
 */
function sheetnode_load($nodes) {
  $vids = array();
  foreach ($nodes as $node) {
    $vids[] = $node->vid;
    $nodes[$node->nid]->sheetnode = array('nid' => $node->nid, 'vid' => $node->vid, 'value' => NULL);
  }
  if (empty($vids)) return;

  $sheetnodes = db_query('SELECT * FROM {sheetnode} WHERE vid IN (:vids)', array(':vids' => $vids));
  foreach ($sheetnodes as $sheetnode) {
    $nodes[$sheetnode->nid]->sheetnode = (array)$sheetnode;
  }
}

/**
 * Implements hook_view().
 */
function sheetnode_view($node, $view_mode) {
  // SocialCalc sheet.
  if ($view_mode == 'full') {
    $output = _sheetnode_inject(
      drupal_clean_css_identifier('sheetnode-' . $node->nid), 
      $node->sheetnode['value'], 
      FALSE, 
      array('entity-name' => 'node', 'oid' => $node->nid)
    );
    $node->content['sheetnode'] = array('#markup' => $output, '#weight' => -1);
  }
  return $node;
}

/**
 * Implements hook_delete().
 */
function sheetnode_delete(&$node) {
  db_delete('sheetnode')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_form().
 */
function sheetnode_form($node, &$form_state) {
  $types = node_type_get_types();
  $type = $types['sheetnode'];

  // Generate the default title.
  $form = node_content_form(!empty($node) ? $node : 'sheetnode', $form_state);
 
  // SocialCalc sheet.
  if (!empty($form_state['input']['sheetnode']['value'])) {
    $value = $form_state['input']['sheetnode']['value'];
    $nid = @$node->nid;
  }
  else if (!empty($node->nid)) {
    $value = $node->sheetnode['value'];
    $nid = $node->nid;
  }
  else if (!empty($node->clone_from_original_nid)) { // support node_clone.module
    $original_node = node_load($node->clone_from_original_nid);
    $value = $original_node->sheetnode['value'];
    $nid = $node->clone_from_original_nid;
  } 
  else {
    $value = '';
    $nid = NULL;
  }
  $output = _sheetnode_inject(
    drupal_clean_css_identifier('sheetnode-' . (empty($node->nid) ? 'new' : $node->nid)), 
    $value, 
    drupal_clean_css_identifier('edit-sheetnode-value'), 
    array('entity-name' => 'node', 'oid' => $nid)
  );
  $form['sheetnode'] = array(
    '#tree' => TRUE,
    '#weight' => -1,
    'socialcalc' => array('#markup' => $output),
    'value' => array('#type' => 'hidden', '#attributes' => array('id' => 'edit-sheetnode-value')),
  );

  // Template.
  if (user_access('create sheetnode template')) {
    $form['sheetnode']['template'] = array(
      '#type' => 'textfield',
      '#title' => t('Save as template'),
      '#description' => t('When saving this sheet, also keep a copy under the name you specify here. Later, this copy can be used as a template for other sheets.'),
      '#required' => FALSE,
    );
  }

  return $form;
}

/**
 * Implements hook_validate().
 */
function sheetnode_validate($node, $form, &$form_state) {
  $errors = form_get_errors();
  if (!empty($errors)) {
    _sheetnode_inject(
      drupal_clean_css_identifier('sheetnode-' . (empty($form['nid']['#value']) ? 'new' : $form['nid']['#value'])), 
      $form['sheetnode']['value']['#value'], 
      drupal_clean_css_identifier('edit-sheetnode-value'), 
      array('entity-name' => 'node', 'oid' => $form['nid']['#value'])
    ); 
  }
}

/**
 * Implements hook_form_alter().
 */
function sheetnode_form_alter(&$form, $form_state, $form_id) {
  // Sheetfield CCK settings:
  // * Force fieldset to open to avoid b0rked sheet layout.
  // * Insert extra template element for default values.
  if ($form_id == 'content_field_edit_form' && $form['#field']['type_name'] == 'sheetfield') {
    $form['widget']['default_value_fieldset']['#collapsed'] = FALSE;

    $options[0] = t('- Select a template -');
    $result = db_query("SELECT tid, name FROM {sheetnode_template}");
    while ($template = db_fetch_object($result)) {
      $options[$template->tid] = $template->name;
    }
    $form['widget']['default_value_fieldset']['sheetfield_template'] = array(
      '#type' => 'select',
      '#title' => t('Template'),
      '#description' => t('Please select the template to load into your new sheetfield. This setting will override the sheet above but will be overridden by the PHP code below.'),
      '#options' => $options, 
      '#default_value' => variable_get('sheetfield_template_' . $form['#field']['field_name'], 0),
      '#weight' => 1,
    );
    $form['widget']['default_value_fieldset']['default_value_widget']['#weight'] = 0;
    $form['widget']['default_value_fieldset']['advanced_options']['#weight'] = 2;
    array_unshift($form['#submit'], '_sheetnode_content_field_edit_form_submit');
  }
}

/**
 * Submit function for content_field_edit_form form.
 */
function _sheetnode_content_field_edit_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['sheetfield_template'])) {
    $template = _sheetnode_template_load($form_state['values']['sheetfield_template']);
    if (!empty($template)) {
      $form_state['values']['default_value'][0]['value'] = $template->value;
    }
  }
  variable_set('sheetfield_template_' . $form_state['values']['field_name'], $form_state['values']['sheetfield_template']);
}

/**
 * Helper function to inject Sheetnode JavaScript.
 */
function _sheetnode_inject($sheet_id, $value, $save_element, $context) {
  $path = drupal_get_path('module', 'sheetnode');
  drupal_add_js($path . '/socialcalc/socialcalcconstants.js', array('weight' => 1));
  drupal_add_js($path . '/socialcalc/socialcalc-3.js', array('weight' => 2));
  drupal_add_js($path . '/socialcalc/socialcalctableeditor.js', array('weight' => 3));
  drupal_add_js($path . '/socialcalc/formatnumber2.js');
  drupal_add_js($path . '/socialcalc/formula1.js');
  drupal_add_js($path . '/socialcalc/socialcalcpopup.js', array('weight' => 4));
  drupal_add_js($path . '/socialcalc/socialcalcspreadsheetcontrol.js', array('weight' => 5));
  drupal_add_js($path . '/socialcalc/socialcalcviewer.js', array('weight' => 5));
  drupal_add_js($path . '/sheetnode.js', array('weight' => 6));
  drupal_add_css($path . '/socialcalc/socialcalc.css');
  drupal_add_css($path . '/sheetnode.css');

  module_invoke_all('sheetnode_plugins', $value, $save_element, $context);

  static $sheets = NULL;
  if (!isset($sheets[$sheet_id])) {
    drupal_add_js(array('sheetnode' => array($sheet_id => array(
      'value' => $value, 
      'imagePrefix' => base_path() . $path . '/socialcalc/images/sc-',
      'containerElement' => $sheet_id,
      'saveElement' => $save_element,
      'viewMode' => variable_get('sheetnode_view_mode', SHEETNODE_VIEW_FIDDLE),
      'showToolbar' => variable_get('sheetnode_view_toolbar', FALSE),
      'permissions' => array(
        'edit sheetnode settings' => user_access('edit sheetnode settings'),
      ),
      'context' => $context,
    ))), 'setting');
    $sheets[$sheet_id] = TRUE;
  }
  return '<div class="sheetview" id="' . $sheet_id . '"></div>';
}

/**
 * Implements hook_insert().
 */
function sheetnode_insert($node) {
  if ($node->sheetnode['value']) {
    _sheetnode_save($node->nid, $node->vid, $node->sheetnode['value']);
  }
  if ($node->sheetnode['template'] && user_access('create sheetnode template')) {
    _sheetnode_template_save($node->vid, $node->sheetnode['template'], $node->sheetnode['value']);
  }
}

/**
 * Implements hook_update().
 */
function sheetnode_update($node) {
  if (!empty($node->sheetnode['value'])) {
    _sheetnode_save($node->nid, $node->vid, $node->sheetnode['value']);
  }
  else if (!empty($node->revision)) {
    // reverting a revision
    db_query('INSERT INTO {sheetnode} (nid, vid, value) SELECT old.nid, %d, old.value FROM sheetnode AS old WHERE old.vid=%d', array($node->vid, $node->old_vid));
  }
  if (!empty($node->sheetnode['template']) && user_access('create sheetnode template')) {
    _sheetnode_template_save($node->vid, $node->sheetnode['template'], $node->sheetnode['value']);
  }
}

/**
 * Implements hook_nodeapi().
 */
function sheetnode_nodeapi($node, $op) {
  if ($op == 'presave' && $node->type == 'sheetnode' && isset($node->devel_generate)) {
    // Generate random spreadsheets for sheetnodes.
    $node->sheetnode = array(
      'template' => NULL,
    ) + sheetnode_content_generate($node, NULL);
  }
}

/**
 * Implements hook_node_update_index().
 */
function sheetnode_node_update_index($node) {
  $output = '';
  if ($node->type == 'sheetnode') {
    $output .= _sheetnode_update_index($node->sheetnode['value']);
  }
  $instances = field_info_instances('node', $node->type);
  $fields = field_info_fields();
  foreach ($instances as $field_name => $instance) {
    if ($fields[$field_name]['type'] == 'sheetfield') {
      foreach ($node->{$field_name}[$node->language] as $item) {
        $output .= _sheetnode_update_index($item['value']);
      }
    }
  }
  return $output;
}

/**
 * Helper function to return an indexable version of the spreadsheet.
 */
function _sheetnode_update_index($value) {
  require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
  $output = '<table>';
  $socialcalc = socialcalc_parse($value);
  $sc = $socialcalc['sheet'];
  $row = -1;
  if (!empty($sc['cells'])) foreach ($sc['cells'] as $c) {
    if ($c['pos'][1] > $row) { // new row? - this assumes cells are ordered by col/row
      if ($row != -1) {
        $output .= '</tr>';
      }
      $row = $c['pos'][1];
      $output .= '<tr>';
    }
    $output .= '<td>'. (isset($c['datavalue']) ? $c['datavalue'] : '&nbsp;') . (isset($c['comment']) ? ' ('. check_plain($c['comment']) .')' : '')  .'</td>';
  }
  if ($row != -1) {
    $output .= '</tr>';
  }
  $output .= '</table>';
  return $output;
}

/**
 * Implements hook_token_list().
 */
function sheetnode_token_list($type = 'all') {
  if ($type == 'all' || $type == 'node') {
    return array(
      'sheetnode' => array(
        'sheetnode-????' => t('Enter a cell reference such as sheetnode-B52, sheetnode-C79, etc.'),
      ),
    );
  }
  if ($type == 'all' || $type == 'field') {
    return array(
      'sheetfield' => array(
        '????' => t('Enter a cell reference such as sheetnode-B52, sheetnode-C79, etc.'),
      ),
    );
  }
}

/**
 * Implements hook_token_values().
 */
function sheetnode_token_values($type, $object = NULL) {
  $tokens = array();
  if ($type == 'node' && $object->type == 'sheetnode') {
    require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
    $socialcalc = socialcalc_parse($object->sheetnode['value']);
    $sc = $socialcalc['sheet'];
    if (!empty($sc['cells'])) foreach ($sc['cells'] as $coord => $c) {
      $tokens['sheetnode-' . $coord] = isset($c['datavalue']) ? $c['datavalue'] : '';
    }
  }
  if ($type == 'node' && $object->type != 'sheetnode') {
    foreach (content_fields(NULL, $object->type) as $field) {
      if ($field['type_name'] == $object->type && $field['type'] == 'sheetfield') {
        require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
        $item = $object->{$field['field_name']}[0]; // To act like other CCK fields
        $socialcalc = socialcalc_parse($item['value']);
        if (!empty($socialcalc['sheet'])) {
          $sc = $socialcalc['sheet'];
          if (!empty($sc['cells'])) foreach ($sc['cells'] as $coord => $c) {
            $tokens[$field['field_name'] . '-' . $coord] = isset($c['datavalue']) ? $c['datavalue'] : '';
          }
        }
      }
    }
  }
  return $tokens;
}

/**
 * Implements hook_menu().
 */
function sheetnode_menu() {
  $items = array();
  
  $items['sheetnode/load'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_sheetnode_ajax_load',
    'access arguments' => array('access content'),
  );
  $items['sheetnode/field'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_sheetnode_ajax_field',
    'access arguments' => array('access content'),
  );
  $items['sheetnode/token'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_sheetnode_ajax_token',
    'access arguments' => array('access content'),
  );
  $items['node/add/sheetnode_template'] = array(
    'title' => 'Sheetnode import from template',
    'access arguments' => array('create sheetnode'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sheetnode_import_template'),
    'description' => 'Create a new sheetnode from an existing template.',
  );
  $items['admin/config/sheetnode'] = array(
    'title' => 'Sheetnode',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sheetnode_admin_settings'),
    'description' => 'Sheetnode module settings',
  );
  $items['admin/config/sheetnode/general'] = array(
    'title' => 'General',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

define('SHEETNODE_VIEW_READONLY', 0);
define('SHEETNODE_VIEW_FIDDLE',   1);
define('SHEETNODE_VIEW_HTML',     2);

/**
 * Form function for admin/settings/sheetnode.
 */
function sheetnode_admin_settings() {
  $form['sheetnode_view_mode'] = array(
    '#type' => 'radios',
    '#title' => t('View mode'),
    '#description' => t('Select the way sheetnodes should be displayed in view mode.'),
    '#options' => array(
      SHEETNODE_VIEW_READONLY => t('Read-only spreadsheet'),
      SHEETNODE_VIEW_FIDDLE   => t('Fiddle mode (interactive spreadsheet without save functionality)'),
      SHEETNODE_VIEW_HTML     => t('HTML table'),
    ),
    '#default_value' => variable_get('sheetnode_view_mode', SHEETNODE_VIEW_FIDDLE),
  );
  $form['sheetnode_view_toolbar'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show toolbar in view mode'),
    '#default_value' => variable_get('sheetnode_view_toolbar', FALSE),
  );
  return system_settings_form($form);
}

/**
 * Form function for node/add/sheetnode_template.
 */
function sheetnode_import_template($form, &$form_state) {
  $options[0] = t('- Select a template -');
  $templates = db_query("SELECT tid, name FROM {sheetnode_template}");
  foreach ($templates as $template) {
    $options[$template->tid] = $template->name;
  }
  $form['template'] = array(
    '#type' => 'select',
    '#title' => t('Template'),
    '#description' => t('Please select the template to load into your new sheetnode.'),
    '#options' => $options, 
    '#default_value' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Validate function for sheetnode_import_template form.
 */
function sheetnode_import_template_validate($form, &$form_state) {
  if (!$form_state['values']['template']) {
    form_set_error('template', t('Please select a template.'));
  }
}

/**
 * Submit function for sheetnode_import_template form.
 */
function sheetnode_import_template_submit($form, &$form_state) {
  global $user;
  module_load_include('inc', 'node', 'node.pages');

  $template = _sheetnode_template_load($form_state['values']['template']);
  $node = new StdClass;
  $node->type = 'sheetnode';

  node_object_prepare($node);

  $node->title = $template->name;
  $node->name = $user->name;
  $node->sheetnode['value'] = $template->value;
  $node->sheetnode['template'] = NULL;

  // Let other modules alter the sheetnode or do other work.
  $context = array(
    'template' => $template,
  );
  drupal_alter('sheetnode_import', $node, $context);

  // Save the sheetnode.
  $node = node_submit($node);
  node_save($node);

  if (!empty($node->nid)) {
    $form_state['redirect'] = 'node/' . $node->nid . '/edit';
  }
}

/**
 * Implements hook_views_api().
 */
function sheetnode_views_api() {
  return array(
    'api' => 2.0,
  );
}

define('SHEETNODE_RANGE_LABELS_ROW', 1);
define('SHEETNODE_RANGE_LABELS_COL', 2);
define('SHEETNODE_RANGE_LABELS_ROW_COL', 3);

/**
 * Implements hook_theme().
 */
function sheetnode_theme($existing, $type, $theme, $path) {
  return array(
    'sheetnode_range' => array(
      'variables' => array('range' => NULL, 'labels' => SHEETNODE_RANGE_LABELS_ROW_COL),
    ),
  );
}

/**
 * Theme function for sheetnode_range.
 */
function theme_sheetnode_range($variables) {
  $range = $variables['range'];
  $labels = $variables['labels'];
  if (empty($range)) return '';
  require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
  list($c, $r) = socialcalc_coord_to_cr(key($range));
  $row = array();
  if ($labels & SHEETNODE_RANGE_LABELS_ROW) {
    $row[] = array('data' => $r, 'header' => TRUE);
  }
  $header = array();
  if ($labels & SHEETNODE_RANGE_LABELS_ROW) {
    $header[] = array();
  }
  $rows = array();
  foreach ($range as $coord => $value) {
    $pos = socialcalc_coord_to_cr($coord);
    if ($pos[1] > $r) {
      $rows[] = $row;
      $r = $pos[1];
      $row = array();
      if ($labels & SHEETNODE_RANGE_LABELS_ROW) {
        $row[] = array('data' => $r, 'header' => TRUE);
      }
    }
    $row[] = $value;
    if (empty($rows)) {
      $coord = socialcalc_cr_to_coord($pos[0], $pos[1], TRUE);
      $header[] = $coord[0];
    }
  }
  $rows[] = $row;
  return theme('table', array('header' => $labels & SHEETNODE_RANGE_LABELS_COL ? $header : NULL, 'rows' => $rows));
}

/**
 * Implements hook_field_extra_fields().
 */
function sheetnode_field_extra_fields() {
  $extra['node']['sheetnode'] = array(
    'form' => array(
      'sheetnode' => array(
        'label' => t('Spreadsheet'),
        'description' => t('Spreadsheet control'),
        'weight' => -1,
      )
    ),
    'display' => array(
      'sheetnode' => array(
        'label' => t('Spreadsheet'),
        'description' => t('Spreadsheet control'),
        'weight' => -1,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_field_info().
 */
function sheetnode_field_info() {
  return array(
    'sheetfield' => array(
      'label' => t('Spreadsheet'),
      'description' => t('Store a spreadsheet.'),
      'default_widget' => 'sheetfield_spreadsheet',
      'default_formatter' => 'sheetfield_default',
    ),
  );
}

/**
 * Implements hook_field_node_validate().
 *
 * Catch form errors to re-initialize sheetfields.
 */
function sheetnode_node_validate($node, $form, &$form_state) {
  $errors = form_get_errors();
  if (!empty($errors)) foreach ($form_state['field'] as $field_name => $field) {
    if ($field[$node->language]['field']['type'] == 'sheetfield' && !empty($form_state['input'][$field_name])) {
      foreach ($form_state['input'][$field_name][$node->language] as $delta => $item) {
        $field_key = 'value';
        $element_id = drupal_clean_css_identifier('edit-' . $field_name . '-' . $node->language . '-' . $delta);
        $output = _sheetnode_inject(
          drupal_clean_css_identifier('sheetfield-' . $element_id),
          $item['value'],
          $element_id,
          array('entity-name' => 'node', 'oid' => @$node->nid)
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function sheetnode_field_is_empty($item, $field) {
  if (empty($item['value'])) return TRUE;
  require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
  $sc = socialcalc_parse($item['value']);
  return empty($sc['sheet']['cells']);
}

/**
* Implements hook_content_generate().
*/
function sheetnode_content_generate($node, $field) {
  require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');

  $sc = array(
    'edit' => array(),
    'audit' => array(),
    'sheet' => array(),
  );
  for ($row = 1; $row < mt_rand(10, 50); $row++) {
    $sc['sheet']['cells'][] = array(
      'pos' => array(1, $row),
      'datavalue' => devel_generate_word(mt_rand(6, 12)),
      'datatype' => 't',
      'valuetype' => 't',
    );
    $sc['sheet']['cells'][] = array(
      'pos' => array(2, $row),
      'datavalue' => _sheetnode_lcg_randf(-100, 100), 
      'datatype' => 'v',
      'valuetype' => 'n',
    );
  }
  $sc['edit']['ecell']['coord'] = 'A1';
  return array('value' => socialcalc_save($sc));
}

/**
 * Helper function to return random number using combined linear congruential generator.
 */
function _sheetnode_lcg_randf($min, $max) {
  return $min + lcg_value() * abs($max - $min);
}

/**
 * Implements hook_field_formatter_info().
 */
function sheetnode_field_formatter_info() {
  return array(
    'sheetfield_default' => array(
      'label' => t('Default'),
      'field types' => array('sheetfield'),
    ),
    'socialcalc_date' => array(
      'label' => t('SocialCalc'),
      'field types' => array('date', 'datetime', 'datestamp'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function sheetnode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'sheetfield_default':
      foreach ($items as $delta => $item) {
        $value = $item['value'];
        $output = _sheetnode_inject(
          drupal_clean_css_identifier('sheetfield-' . $field['field_name'] . '-' . $langcode . '-' . $delta),
          $value, 
          FALSE, 
          isset($entity) && $entity == 'node' ? array('entity-name' => $entity_type, 'oid' => @$entity->nid) : NULL
        );
        $element[$delta] = array('#markup' => $output);
      }
      break;
    case 'socialcalc_date':
      break;
  }

  return $element;
}

/** 
 * Implements hook_field_widget_info().
 */
function sheetnode_field_widget_info() {
  return array(
    'sheetfield_spreadsheet' => array(
      'label' => t('Spreadsheet'),
      'field types' => array('sheetfield'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function sheetnode_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = 
    isset($form_state['input'][$element['#field_name']][$langcode][$delta]['value']) ? 
      $form_state['input'][$element['#field_name']][$langcode][$delta]['value'] : (
    isset($items[$delta]['value']) ? 
      $items[$delta]['value'] : (
    NULL));

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'sheetfield_spreadsheet':
      $field_key = $element['#columns'][0];
      $element_id = drupal_clean_css_identifier('edit-' . $element['#field_name'] . '-' . $langcode . '-' . $delta);
      $output = _sheetnode_inject(
        drupal_clean_css_identifier('sheetfield-' . $element_id),
        $value,
        $element_id,
        isset($form['#node']) ? array('entity-name' => 'node', 'oid' => @$form['#node']->nid) : NULL
      );
      $widget[$field_key] = array('#type' => 'hidden', '#attributes' => array('id' => $element_id), '#prefix' => $output);
      break;
  }
  
  return $widget;
}

/**
 * Implements FAPI hook_element_info().
 */
function sheetnode_element_info() {
  return array(
    'spreadsheet' => array(
      '#input' => TRUE,
      '#process' => array('_sheetnode_spreadsheet_process'),
    ),
  );
}

/**
 * Process function for spreadsheet element.
 */
function _sheetnode_spreadsheet_process($element, &$form_state, $form) {
  $field_key = 'value';
  $value = 
    isset($form_state['input'][$element['#name']][$field_key]) ? 
      $form_state['input'][$element['#name']][$field_key] : (
    is_array($element['#value']) && isset($element['#value'][$field_key]) ? 
      $element['#value'][$field_key] : (
    isset($element['#value']) ? 
      $element['#value'] : (
    is_array($element['#default_value']) && isset($element['#default_value'][$field_key]) ? 
      $element['#default_value'][$field_key] : ( 
    isset($element['#default_value']) ? $element['#default_value'] : (
    NULL)))));

  $output = _sheetnode_inject(
    drupal_clean_css_identifier('sheetfield-' . $element['#id']), 
    $value, 
    drupal_clean_css_identifier($element['#id'] . '-' . $field_key), 
    NULL
  );
  $element['#tree'] = TRUE;
  $element[$field_key] = array(
    '#type' => 'hidden', 
    '#attributes' => array('id' => drupal_clean_css_identifier($element['#id'] . '-' . $field_key)), 
    '#prefix' => $output,
  );
  return $element;
}

/**
 * Theme function for SocialCalc date formatter.
 */
function theme_sheetnode_formatter_socialcalc_date($element) {
  require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');

  $field_name = $element['#field_name'];
  $fields = content_fields();
  $field = $fields[$field_name];
  $item = $element['#item'];

  $value = $item['value'];
  if ($field['type'] == DATE_ISO) {
    $value = str_replace(' ', 'T', date_fuzzy_datetime($value));
  }
  $date = date_make_date($value, NULL, $field['type'], $field['granularity']);
  return socialcalc_import_date($date);
}

/**
 * API function to return a sheet given a name.
 */
function sheetnode_find_sheet($sheetname) {
  require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');

  $args = explode('/', $sheetname);
  $sheetname = array_shift($args);

  // No value found by default.
  $value = NULL;
  $title = NULL;

  // Try to find a node.
  $node = NULL;
  if (is_numeric($sheetname)) {
    $node = node_load(intval($sheetname));
  }
  else {
    $nid = db_result(db_query("SELECT nid FROM {node} WHERE UCASE(title) = '%s' LIMIT 1", db_escape_string(strtoupper($sheetname))));
    if ($nid) {
      $node = node_load($nid);
    }
  }

  // Is it a sheetnode?
  if ($node && $node->type == 'sheetnode') {
    $value = $node->sheetnode['value'];
    $title = $node->title;
  }

  // Is it a sheetfield?
  if (!$value && $node && module_exists('content')) {
    $target_field = empty($args[0]) ? FALSE : $args[0];
    $target_delta = empty($args[1]) ? 0 : intval($args[1]);
    $type = content_types($node->type);
    foreach ($type['fields'] as $field_name => $field_info) {
      if (
        $field_info['type'] == 'sheetfield' && 
        (!$target_field || 0 == strcasecmp($target_field, $field_name) || 0 == strcasecmp($target_field, $field_info['widget']['label'])) &&
        isset($node->$field_name) && 
        isset($node->{$field_name}[$target_delta])
      ) {
        $value = $node->{$field_name}[$target_delta]['value'];
        $title = trim(sprintf("%s %s %s", $node->title, $field_info['widget']['label'], $target_delta ? strval($target_delta) : ''));
        break;
      }
    }
  }

  // Is it a sheetview?
  if (!$value && module_exists('views')) { // Try a view feed with our SocialCalc output plugin style
    $view = views_get_view($sheetname);
    if ($view) foreach (array_keys($view->display) as $display_name) {
      $display = $view->display[$display_name];
      if (isset($display->display_options['style_plugin']) && $display->display_options['style_plugin'] == 'sheet_raw') {
        if (!empty($args)) {
          $view->set_arguments($args);
        }
        $value = $view->render($display->id);
        $title = $display->get_option('title');
        header('Content-type: text/html'); // Our style plugin sets this to text/plain
      } 
    }
  }

  return array($value, $title);
}

/**
 * AJAX function to return a sheet value. 
 */
function _sheetnode_ajax_load($sheetname = NULL) {
  // Parse the sheetname which might contain extra args separated by forward-slash.
  if (empty($sheetname)) $sheetname = $_REQUEST['sheetname'];

  // Look for the sheet.
  list($value, $title) = sheetnode_find_sheet($sheetname);

  // Found a spreadsheet: return it.
  if ($value) {
    $parts = socialcalc_parse_parts($value);
    if (isset($parts['sheet'])) {
      echo $parts['sheet'];
    }
  }
  exit();
}

/**
 * AJAX function to return a token value.
 */
function _sheetnode_ajax_token($oid = NULL, $entity = NULL, $token = NULL) {
  if (!$oid) $oid = $_REQUEST['oid'];
  if (!$entity) $entity = $_REQUEST['entity'];
  if (!$token) $token = $_REQUEST['token'];

  $value = NULL;
  $object = _sheetnode_load_entity($entity, $oid);
  if ($object) {
    // Do the token replacement.
    if (module_exists('token')) {
      $value = token_replace($token, $entity, $object);
    }

    // If found, send it back.
    if ($value) {
      require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
      drupal_json(array(
        'type' => is_numeric($value) ? 'n' : 'th',
        'value' => $value,
      ));
      exit();
    }
  }
  drupal_json(array('value' => '', 'type' => 'e#NAME?'));
  exit();
}

/**
 * AJAX function to return a field value.
 */
function _sheetnode_ajax_field($oid = NULL, $entity = NULL, $field = NULL) {
  if (!$oid) $oid = $_REQUEST['oid'];
  if (!$entity) $entity = $_REQUEST['entity'];
  if (!$field) $field = $_REQUEST['field'];

  $value = NULL;
  $object = _sheetnode_load_entity($entity, $oid);
  if ($object) {
    // Try CCK field.
    if ($entity == 'node' && module_exists('content')) {
      $field_info = content_fields($field, $object->type);
      if ($field_info) {
        $field_info['display_settings']['label']['format'] = 'hidden';
        $value = content_view_field($field_info, $object, FALSE, TRUE);
      }
    }

    // Try rendered node field.
    if (!$value && $entity == 'node') {
      $node = drupal_clone($object);
      $node = node_build_content($node);
      if (isset($node->content[$field])) {
        $value = drupal_render($node->content[$field]);
      }
    }

    // Try raw object field.
    if (!$value && isset($object->$field)) {
      if (is_object($object->$field) || is_array($object->$field)) {
        $value = print_r($object->$field, TRUE);
      }
      else {
        $value = $object->$field;
      }
    }

    // If found, send it back.
    if ($value) {
      require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
      drupal_json(array(
        'type' => is_numeric($value) ? 'n' : 'th',
        'value' => $value,
      ));
      exit();
    }
  }
  drupal_json(array('value' => '', 'type' => 'e#NAME?'));
  exit();
}

/**
 * Helper function to save a sheetnode.
 */
function _sheetnode_save($nid, $vid, $value) {
  db_delete('sheetnode')
    ->condition('nid', $nid)
    ->execute();
  db_insert('sheetnode')
    ->fields(array(
      'nid' => $nid,
      'vid' => $vid,
      'value' => $value
    ))
    ->execute();
}

/**
 * Helper function to save a sheetnode template.
 */
function _sheetnode_template_save($vid, $name, $value) {
  db_merge('sheetnode_template')
    ->key(array('name' => $name))
    ->fields(array(
      'vid' => $vid,
      'value' => $value,
    ))
    ->execute();
}

/**
 * Helper function to load a sheetnode template.
 */
function _sheetnode_template_load($tid) {
  $template = db_select('sheetnode_template', 's')
    ->fields('s')
    ->condition('tid', $tid, '=')
    ->execute()
    ->fetchAssoc();
  return (object)$template;
}

/**
 * Helper function to load a Drupal entity.
 */
function _sheetnode_load_entity($entity, $oid) {
  if (function_exists($entity . '_load')) { // call load function directly
    return call_user_func($entity . '_load', $oid);
  }
  if (module_exists('views_bulk_operations')) { // get entity info from VBO
    $object_info = _views_bulk_operations_get_object_info();
    if (isset($object_info[$entity]) && function_exists($object_info[$entity]['load'])) {
      return call_user_func($object_info[$entity]['load'], $oid);
    }
  }
  watchdog('sheetnode', 'Could not load entity %entity: No load function found.', array('%entity' => $entity), WATCHDOG_WARNING);
  return NULL;
}

/**
 * API function to get all sheetfields of a node type.
 */
function sheetnode_get_sheetfields($type) {
  if (!module_exists('content')) return FALSE;

  $sheetfields = array();
  $type_info = content_types($type);
  foreach ($type_info['fields'] as $field) {
    if ($field['type'] == 'sheetfield') {
      $sheetfields[] = $field;
    }
  }
  return $sheetfields;
}

