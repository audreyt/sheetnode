<?php

/**
 * @file
 * Install, update and uninstall functions for the sheetnode module.
 */

/**
 * Implements hook_install().
 */
function sheetnode_install() {
  // use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $sheetnode = array(
    'type' => 'sheetnode',
    'name' => $t('Sheetnode'),
    'base' => 'node_content',
    'description' => $t('This is a sheetnode node with serialized spreadsheet data'),
    'body_label' => $t('Description of sheetnode instance')
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($sheetnode);
  node_add_body_field($content_type, $label='Description');

  // Save the content type
  node_type_save($content_type);

  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'sheetnode');

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);
}

/**
 * Implements hook_uninstall().
 */
function sheetnode_uninstall() {
  // Gather all the sheetnode content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'sheetnode'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over any remaining field instances attached to the sheetnode
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'sheetnode');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('sheetnode');

  // Purge all field information
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}


/**
* Implements hook_schema().
*/
function sheetnode_schema() {
   $schema['sheetnode'] = array(
     'description' => t("Stores data for the sheetnode data type, including serialized spreadsheet data"),
     'fields' => array(
        'nid' => array(
          'type'             => 'int',
          'unsigned'         => TRUE,
          'not null'         => TRUE,
          'description'      => t("The primary identifier for a node."),
         ),
        'vid' => array(
          'type'             => 'int',
          'unsigned'         => TRUE,
          'not null'         => TRUE,
          'description'      => t("The revision identifier for a node."),
         ),
        'value'        => array(
         'type'             => 'text',
         'size'             => 'big',
         'not null'         => TRUE,
         'description'      => t('The serialized worksheet content.'),
         ),
     ),
     'primary key' => array('vid'),
     'indexes' => array(
        'nid' => array('nid')
     ),
   );
   $schema['sheetnode_template'] = array(
     'description' => t("Stores parameters for a sheetnode template"),
     'fields' => array(
        'tid'           => array(
          'type'             => 'serial',
          'unsigned'         => TRUE,
          'not null'         => TRUE,
          'description'      => t("The primary identifier for the template."),
         ),
        'vid'           => array(
          'type'             => 'int',
          'unsigned'         => TRUE,
          'not null'         => TRUE,
          'default'          => 0,
          'description'      => t("The original node version for this template."),
         ),
        'name'          => array(
         'type'             => 'varchar',
         'length'           => '32',
         'default'          => '',
         'not null'         => TRUE,
         'description'      => t('The unique name of the template. May only be alphanumeric characters plus underscores.'),
         ),
        'value'         => array(
         'type'             => 'text',
         'size'             => 'big',
         'not null'         => TRUE,
         'description'      => t('The serialized worksheet template content.'),
         ),
     ),
     'primary key' => array('tid'),
     'unique keys' => array(
        'key_name' => array('name')
     ),
   );
   return $schema;
 }
