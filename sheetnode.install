<?php

/**
 * Implementation of hook_schema().
 */
function sheetnode_schema() {
  return sheetnode_schema_7001();
}

/**
 * Schema function.
 */
function sheetnode_schema_7001() {
  $schema['sheetnode'] = array(
    'description' => 'The base table for sheetnodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The primary identifier for a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The revision identifier for a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => 'The worksheet content.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('vid'),
    'unique keys' => array(
      'nid_vid' => array('nid', 'vid'), 
    ),
    'foreign keys' => array(
      'node_revision' => array(
        'table' => 'node_revision', 
        'columns' => array('vid' => 'vid'),
      ), 
      'node' => array(
        'table' => 'node', 
        'columns' => array('nid' => 'nid'),
      ),
    ),  
  );
  $schema['sheetnode_template'] = array(
    'description' => 'The table for sheetnode templates.',
    'fields' => array(
      'tid' => array(
        'description' => 'The primary identifier for the template.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '32',
        'default' => '',
        'not null' => TRUE,
        'description' => 'The unique name of the template.',
      ),
      'value' => array(
        'description' => 'The worksheet template content.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The original node version for this template.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('tid'),
    'unique keys' => array(
      'name' => array('name'),
      'vid' => array('vid'),
    ),
    'foreign keys' => array(
      'node_revision' => array(
        'table' => 'node_revision', 
        'columns' => array('vid' => 'vid'),
      ), 
    ),
  );
  return $schema;
}

/**
 * Implementation of hook_field_schema().
 */
function sheetnode_field_schema($field) {
  return sheetnode_field_schema_7001($field);
}

function sheetnode_field_schema_7001($field) {
  $columns = array(
    'value' => array(
      'description' => 'The worksheet content.',
      'type' => 'text',
      'size' => 'big',
      'not null' => TRUE,
    ),
  );
  $indexes = array();
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implementation of hook_update_N().
 * Remove sheetnode serialization.
 */
function sheetnode_update_7001(&$sandbox) {
  $ret = array();

  // TODO: Adjust descriptions.
  

  // Set up Batch API loop to update sheetnodes and templates.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['sheetnode_current'] = 0;
    $sandbox['sheetnode_max'] = db_result(db_query("SELECT COUNT(vid) FROM {sheetnode}")) + 0;
    $sandbox['template_current'] = 0;
    $sandbox['template_max'] = db_result(db_query("SELECT COUNT(tid) FROM {sheetnode_template}")) + 0;
    $sandbox['max'] = $sandbox['sheetnode_max'] + $sandbox['template_max'];
  }
  if ($sandbox['progress'] < $sandbox['sheetnode_max']) {
    $sheetnodes = db_query_range("SELECT vid, value FROM {sheetnode} WHERE vid > %d ORDER BY vid ASC", $sandbox['sheetnode_current'], 0, 1);
    while ($sheetnode = db_fetch_object($sheetnodes)) {
      if (!empty($sheetnode->value)) {
        $value = db_escape_string(unserialize($sheetnode->value));
        $ret[] = update_sql("UPDATE {sheetnode} SET value = '$value' WHERE vid = {$sheetnode->vid}");
      }
      $sandbox['progress']++;
      $sandbox['sheetnode_current'] = $sheetnode->vid;
    }
  }
  else {
    $templates = db_query_range("SELECT tid, value FROM {sheetnode_template} WHERE tid > %d ORDER BY tid ASC", $sandbox['template_current'], 0, 1);
    while ($template = db_fetch_object($templates)) {
      if (!empty($template->value)) {
        $value = db_escape_string(unserialize($template->value));
        $ret[] = update_sql("UPDATE {sheetnode_template} SET value = '$value' WHERE tid = {$template->tid}");
      }
      $sandbox['progress']++;
      $sandbox['template_current'] = $template->tid;
    }
  }

  $ret['#finished'] = !$sandbox['max'] ? 1 : ($sandbox['progress'] / $sandbox['max']);
  return $ret;
}

